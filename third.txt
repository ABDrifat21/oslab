#include <iostream>
#include <unistd.h>
#include <cstring>
#include <sys/wait.h>

using namespace std;

const int BUFFER_SIZE = 256;

void process1(int writePipe, int readPipe) {
    char buffer[BUFFER_SIZE];
    string message;
    while (true) {
        cout << "Process 1: Enter a message: ";
        getline(cin, message);
        write(writePipe, message.c_str(), message.size() + 1);

        if (message == "GoodBye") break;

        read(readPipe, buffer, BUFFER_SIZE);
        cout << "Process 1 received: " << buffer << endl;
        if (strcmp(buffer, "GoodBye") == 0) break;
    }
}

void process2(int writePipe, int readPipe) {
    char buffer[BUFFER_SIZE];
    string message;
    while (true) {
        read(readPipe, buffer, BUFFER_SIZE);
        cout << "Process 2 received: " << buffer << endl;

        if (strcmp(buffer, "GoodBye") == 0) break;

        cout << "Process 2: Enter a message: ";
        getline(cin, message);
        write(writePipe, message.c_str(), message.size() + 1);

        if (message == "GoodBye") break;
    }
}

int main() {
    int pipe1[2], pipe2[2];

    if (pipe(pipe1) == -1 || pipe(pipe2) == -1) {
        perror("Pipe creation failed");
        return 1;
    }

    pid_t pid = fork();

    if (pid == -1) {
        perror("Fork failed");
        return 1;
    } else if (pid == 0) {
        close(pipe1[1]);
        close(pipe2[0]);
        process2(pipe2[1], pipe1[0]);
    } else {
        close(pipe1[0]);
        close(pipe2[1]);
        process1(pipe1[1], pipe2[0]);
        wait(nullptr);
    }

    return 0;
}
